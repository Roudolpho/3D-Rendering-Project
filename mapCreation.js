/*This JavaScript file contains the definition of the different rooms and rule on how to define new rooms
 *
 *
 */

//Map Creation-------------------------------------------------------------------------------------------------------------------------------------
/*
 * All rooms are defined by matricies with integers for the values corresponding
 * to the different types of tiles consisting of a variety of types and colors
 * 
 * TYPES:
 * 	Step Tiles: All of these numbers allow the player to stand on the tile
 * 	Floor = 0 to 49; the values 0-50 are normal floor tiles
 *	Tele = 50 to 99; the values 50-99 are teleporter tiles to switch rooms
 *	Switch = 100 to 149; the values 100-149 are all floor switches the player can step on
 *	Trap = 150 to 199; the values 150-199 are trap tiles that activate when the player steps on them
 *	
 *	Wall Tiles:
 *	Door = 200 to 249;the values 200-249 are openable doors
 *	Wall = 250 to 499; the values 250-499 are all walls
 *	
 *	
 *	The players see a room with 5000 by 5000 possible locations while the code can draw rooms with 50 by 50 tiles
 *	
 *	
 */	
maps = [[[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[250],[250],[250],[250],[0],[0],[250]],
[[250],[0],[0],[250],[0],[0],[250],[0],[0],[250]],
[[250],[0],[0],[250],[0],[0],[250],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]]],

[[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[250],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[0],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[0],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]]],
	
[[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[250],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[0],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[250],[0],[250],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]]],

[[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[252],[252],[252],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[252],[0],[252],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[252],[0],[252],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]]],

[[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]],
[[250],[252],[0],[252],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[252],[0],[252],[0],[252],[252],[252],[0],[252],[252],[252],[0],[0],[0],[250]],
[[250],[252],[0],[252],[0],[252],[252],[0],[0],[252],[0],[252],[0],[0],[0],[250]],
[[250],[252],[0],[0],[0],[252],[252],[0],[252],[252],[0],[252],[0],[0],[0],[250]],
[[250],[0],[0],[0],[0],[252],[252],[0],[252],[252],[0],[0],[0],[0],[0],[250]],
[[250],[0],[252],[252],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[0],[252],[0],[0],[252],[252],[0],[252],[252],[252],[0],[0],[0],[0],[250]],
[[250],[0],[0],[0],[252],[252],[252],[0],[0],[0],[0],[0],[0],[0],[0],[250]],
[[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250],[250]]],

[]]

/*
 * The world variable defines the world map where the number of the
 * spot in the matrix corresponds to the map type that way similar 
 * map types may be reused
 *
 */
world = []
var tileColors = new Array(500);//This array is simply for defining the color of any given map space, however I have only defined a few as I only need a few for testing
tileColors[250]=[100,100,100];
tileColors[251] = [255,255,255];
tileColors[252] = [00,55,00]
//END Map Creation-------------------------------------------------------------------------------------------------------------------------------------

